version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: smartlearn-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=SmartLearn123!
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - smartlearn-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P SmartLearn123! -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smartlearn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartlearn-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # SmartLearn API
  smartlearn-api:
    build: .
    container_name: smartlearn-api
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=SmartLearnDB;User Id=sa;Password=SmartLearn123!;TrustServerCertificate=true;
      - JwtSettings__SecretKey=SuperSecretKeyForJWTTokenGenerationThatShouldBeVeryLongAndSecure123456789
      - JwtSettings__Issuer=SmartLearn.API
      - JwtSettings__Audience=SmartLearn.Client
      - JwtSettings__ExpiryMinutes=60
      - AzureOpenAI__Endpoint=https://your-openai-resource.openai.azure.com/
      - AzureOpenAI__ApiKey=your-api-key-here
      - AzureOpenAI__DeploymentName=gpt-4
      - AzureCognitiveServices__SpeechKey=your-speech-key-here
      - AzureCognitiveServices__SpeechRegion=your-speech-region-here
      - Redis__ConnectionString=redis:6379
    ports:
      - "7001:80"
    networks:
      - smartlearn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Blazor Frontend (for development)
  smartlearn-blazor:
    build:
      context: .
      dockerfile: Dockerfile.blazor
    container_name: smartlearn-blazor
    depends_on:
      - smartlearn-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ApiBaseUrl=http://smartlearn-api:80
    ports:
      - "5001:80"
    networks:
      - smartlearn-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smartlearn-nginx
    depends_on:
      - smartlearn-api
      - smartlearn-blazor
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - smartlearn-network
    restart: unless-stopped

  # Elasticsearch for logging and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: smartlearn-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - smartlearn-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: smartlearn-kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - smartlearn-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: smartlearn-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - smartlearn-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: smartlearn-grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - smartlearn-network

volumes:
  sqlserver_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  smartlearn-network:
    driver: bridge